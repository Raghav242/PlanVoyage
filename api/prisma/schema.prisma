// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" 
  url      = env("DATABASE_URL")
}

model User {
  id          Int     @id @default(autoincrement())
  email       String  @unique
  password    String
  name        String?
  trips       Trip[]
  suggestions TripSuggestion[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Trip {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  description String?
  places      TripPlace[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TripPlace {
  id        Int      @id @default(autoincrement())
  tripId    Int
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  placeId   String   @unique // Geoapify Place ID
  name      String
  address   String?
  latitude  Float
  longitude Float
  category  String?  // Restaurant, museum, etc.
  notes     String?  // User's personal notes
  order     Int      // Order of the place in the trip
  source    String   @default("Geoapify") // Could be "Geoapify" or "Manual"
  website   String?  // Store website URLs if available
  phone     String?  // Store contact info if available
  imageUrl  String?  // Store image URLs if needed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TripSuggestion {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  geojson     Json?    // Store the GeoJSON data for the suggestion
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
